import threading
import queue
import time
import random

class VegetableMarket:
    def __init__(self, capacity):
        self.capacity = capacity
        self.market_queue = queue.Queue(maxsize=capacity)
        self.farmers = []
        self.consumers = []

    def add_farmer(self, farmer):
        self.farmers.append(farmer)

    def add_consumer(self, consumer):
        self.consumers.append(consumer)

    def farmer_produce(self, farmer_id, vegetable_type):
        while True:
            time.sleep(random.uniform(1, 3))
            try:
                self.market_queue.put(vegetable_type, block=True, timeout=5)
                print(f"Farmer {farmer_id} produced {vegetable_type}")
                print(f"Market: {vegetable_type} added to the market")
            except queue.Full:
                print(f"Market is full. Farmer {farmer_id} is waiting to sell {vegetable_type}")

    def consumer_purchase(self, consumer_id, desired_vegetable):
        while True:
            time.sleep(random.uniform(1, 3))
            try:
                vegetable_type = self.market_queue.get(block=True, timeout=5)
                if vegetable_type == desired_vegetable:
                    print(f"Consumer {consumer_id} purchased {desired_vegetable}")
                else:
                    print(f"Consumer {consumer_id} didn't find {desired_vegetable}, waiting...")
                    self.market_queue.put(vegetable_type)
            except queue.Empty:
                print(f"Market is empty. Consumer {consumer_id} is waiting for {desired_vegetable}")

    def run_market(self):
        threads = [
            threading.Thread(target=self.farmer_produce, args=(farmer_id, vegetable_type))
            for farmer_id, vegetable_type in enumerate(['Carrot', 'Tomato', 'Cucumber'])
        ]

        threads += [
            threading.Thread(target=self.consumer_purchase, args=(consumer_id, random.choice(['Carrot', 'Tomato', 'Cucumber'])))
            for consumer_id in range(5)
        ]

        for thread in threads:
            thread.start()

        for thread in threads:
            thread.join()

if __name__ == "__main__":
    market = VegetableMarket(capacity=5)
    market.run_market()
